accuracy_logistic_model <- table(pred.class, testing[,"readmitted"])
accuracy_logistic_model
sum(diag(accuracy_logistic_model))/sum(accuracy_logistic_model)
pred.class <- ifelse(pred >0.5 , 3, 2)
accuracy_logistic_model <- table(pred.class, testing[,"readmitted"])
accuracy_logistic_model
sum(diag(accuracy_logistic_model))/sum(accuracy_logistic_model)
Train <- createDataPartition(diabetic_data$readmitted, p = 0.7, list = FALSE)
training <- logistic_data[ Train, ]
testing <- logistic_data[ - Train, ]
set.seed(123)
random_forest <- randomForest(readmitted~., data = training, importance =TRUE)
library(randomForest)
random_forest <- randomForest(readmitted~., data = training, importance =TRUE)
diabetic_data <- read.csv("diabetic_data.csv")
View(diabetic_data)
Train <- createDataPartition(diabetic_data$readmitted, p = 0.7, list = FALSE)
training <- logistic_data[ Train, ]
testing <- logistic_data[ - Train, ]
set.seed(123)
random_forest <- randomForest(readmitted~., data = training, importance =TRUE)
random_forest <- randomForest(readmitted~.,
data = training,
importance =TRUE,
na.action=na.exclude)
rn_data <- diabetic_data[-c(1:3,6,11:12, 19:21, 25:47 )]
Train <- createDataPartition(rn_data$readmitted, p = 0.7, list = FALSE)
training <- logistic_data[ Train, ]
testing <- logistic_data[ - Train, ]
set.seed(123)
random_forest <- randomForest(readmitted~.,
data = training,
importance =TRUE,
na.action=na.exclude)
Train <- createDataPartition(rn_data$readmitted, p = 0.5, list = FALSE)
training <- logistic_data[ Train, ]
testing <- logistic_data[ - Train, ]
set.seed(123)
random_forest <- randomForest(readmitted~.,
data = training,
importance =TRUE,
na.action=na.exclude)
random_forest <- randomForest(readmitted~.,
data = training,
ntree = 10,
importance =TRUE,
na.action=na.exclude)
summary(random_forest)
random_forest <- randomForest(readmitted~.,
data = training,
ntree = 50,
importance =TRUE,
na.action=na.exclude)
pred_w_random <- predict(random_forest, testing, type = "class")
tableCheck <- (pred_w_random, testing$readmitted)
tableCheck <- table(pred_w_random, testing$readmitted)
tableCheck
sum(diag(tableCheck))/sum(tableCheck)
# Load Obesity data #
setwd("C:/Users/Naran/DataAnalytics2022_Alejandro_Naranjo/UCI_Obesity_And_Diabetes/Obesity datasets")
obesity_data <- read.csv("ObesityDataSet_raw_and_data_sinthetic.csv")
View(obesity_data)
#Plot of the age frequency
Age_Fre <- ggplot(Frequency_by_Gender, aes(x = Sex, y = Freq, fill=Sex)) +
geom_bar(stat="identity") +
geom_text(aes(label = Freq), vjust = -0.4) +
xlab(" Sex ") +
ylab(" Count ") +
labs(title = "Counting the distribution of Male and Female")
library(ggplot2)
obesity_data[obesity_data$Gender == "Male",]
# Checking to see what the distribution between male and female entries
Freq_male <- nrow(obesity_data[obesity_data$Gender == "Male",])
Freq_female <- nrow(obesity_data[obesity_data$Gender == "Female",])
Frequency_by_Gender <- data.frame(Sex = c("Male","Female"),
Freq = c(Freq_male, Freq_female))
#Plot of the age frequency
Age_Fre <- ggplot(Frequency_by_Gender, aes(x = Sex, y = Freq, fill=Sex)) +
geom_bar(stat="identity") +
geom_text(aes(label = Freq), vjust = -0.4) +
xlab(" Sex ") +
ylab(" Count ") +
labs(title = "Counting the distribution of Male and Female")
Age_Fre
# Distribution of Age
ggplot(obesity_data, aes(x = Age, fill = family_with_history_overweight)) +
stat_bin(binwidth=1)+
stat_bin(binwidth=1, geom="text", aes(label=..count..), vjust=-1.5)+
xlab(" Age (Years) ") +
ylab(" Count ") +
labs(title = "Age Distribution")
colnames(obesity_data)
# Distribution of Age
ggplot(obesity_data, aes(x = Age, fill = family_history_with_overweight)) +
stat_bin(binwidth=1)+
stat_bin(binwidth=1, geom="text", aes(label=..count..), vjust=-1.5)+
xlab(" Age (Years) ") +
ylab(" Count ") +
labs(title = "Age Distribution")
# Distribution of Age
ggplot(obesity_data, aes(x = Age, fill = family_history_with_overweight)) +
stat_bin(binwidth=1)+
xlab(" Age (Years) ") +
ylab(" Count ") +
labs(title = "Age Distribution")
# Distribution of Age
ggplot(obesity_data, aes(x = Age, fill = family_history_with_overweight), color = #2C77BF) +
xlab(" Age (Years) ") +
labs(title = "Age Distribution")
# Distribution of Age
ggplot(obesity_data, aes(x = Age, fill = family_history_with_overweight, color = #2C77BF)) +
# Distribution of Age
ggplot(obesity_data, aes(x = Age, fill = family_history_with_overweight)) +
stat_bin(binwidth=1)+
xlab(" Age (Years) ") +
ylab(" Count ") +
labs(title = "Age Distribution")
# Distribution of Category
ggplot(obesity_data, aes(x = NObeyesdad,fill= NObeyesdad, label=..count..)) +
geom_histogram(stat="count")+
xlab(" Category ") +
ylab(" Count ") +
labs(title = "Destibution of Dependent Feature (NOBeyesdad)")
# Distribution of Age
ggplot(obesity_data, aes(x = Age, fill = family_history_with_overweight, alpha = 0.2)) +
stat_bin(binwidth=1)+
xlab(" Age (Years) ") +
ylab(" Count ") +
labs(title = "Age Distribution")
# Distribution of Age
ggplot(obesity_data, aes(x = Age, fill = family_history_with_overweight, alpha = 0.2)) +
stat_bin(binwidth=1)+
scale_fill_manual(values=c("red", "blue", "green", "grey", "purple"))+
xlab(" Age (Years) ") +
ylab(" Count ") +
labs(title = "Age Distribution")
# Distribution of Age
ggplot(obesity_data, aes(x = Age, fill = family_history_with_overweight, alpha = 0.5)) +
stat_bin(binwidth=1)+
scale_fill_manual(values=c("red", "blue", "green", "grey", "purple"))+
xlab(" Age (Years) ") +
ylab(" Count ") +
labs(title = "Age Distribution")
# Distribution of Age
ggplot(obesity_data, aes(x = Age, fill = family_history_with_overweight)) +
stat_bin(binwidth=1)+
scale_fill_manual(values=c("red", "blue", "green", "grey", "purple"))+
xlab(" Age (Years) ") +
ylab(" Count ") +
labs(title = "Age Distribution")
# Distribution of Age
ggplot(obesity_data, aes(x = Age, fill = family_history_with_overweight), alpha =0.2) +
stat_bin(binwidth=1)+
scale_fill_manual(values=c("red", "blue", "green", "grey", "purple"))+
xlab(" Age (Years) ") +
ylab(" Count ") +
labs(title = "Age Distribution")
# Distribution of Age
ggplot(obesity_data, aes(x = Age, fill = family_history_with_overweight)) +
stat_bin(binwidth=1)+
xlab(" Age (Years) ") +
ylab(" Count ") +
labs(title = "Age Distribution")
# Distribution of Age
ggplot(obesity_data, aes(x = Age, fill = family_history_with_overweight)) +
stat_bin(binwidth=1,alpha=0.2)+
xlab(" Age (Years) ") +
ylab(" Count ") +
labs(title = "Age Distribution")
# Distribution of Age
ggplot(obesity_data, aes(x = Age, fill = family_history_with_overweight)) +
stat_bin(binwidth=1,alpha=0.5)+
xlab(" Age (Years) ") +
ylab(" Count ") +
labs(title = "Age Distribution")
# Distribution of Age
ggplot(obesity_data, aes(x = Age, fill = family_history_with_overweight)) +
stat_bin(binwidth=1,alpha=0.75)+
xlab(" Age (Years) ") +
ylab(" Count ") +
labs(title = "Age Distribution")
# Distribution of Category
ggplot(obesity_data, aes(x = NObeyesdad,fill= NObeyesdad, label=..count..)) +
geom_histogram(stat="count")+
xlab(" Category ") +
ylab(" Count ") +
labs(title = "Destibution of Dependent Feature (NOBeyesdad)")
# Distribution of Category
ggplot(obesity_data, aes(x = NObeyesdad,fill= MTRANS, label=..count..)) +
geom_histogram(stat="count")+
xlab(" Category ") +
ylab(" Count ") +
labs(title = "Destibution of Dependent Feature (NOBeyesdad)")
# Distribution of Category
ggplot(obesity_data, aes(x = NObeyesdad,fill= MTRANS, label=..count..)) +
geom_histogram(stat="count")+
xlab(" Category ") +
ylab(" Count ") +
labs(title = "Distribution of Weight Category Including Means Of Transportation")
# Distribution of weight
ggplot(obesity_data, aes(x = Weight, fill = NObeyesdad)) +
geom_histogram(binwidth = 3)+
xlab(" Weight ") +
ylab(" Count ") +
labs(title = "Weight Distribution (Binsize = 3")
# Distribution of Age
ggplot(obesity_data, aes(x = Age, fill = family_history_with_overweight)) +
stat_bin(binwidth=1,alpha=0.75)+
xlab(" Age (Years) ") +
ylab(" Count ") +
labs(title = "Age Distribution")
# Distribution of Age with category of overweight
ggplot(obesity_data, aes(x = Age, fill = NObeyesdad)) +
stat_bin(binwidth=1,alpha=0.75)+
xlab(" Age (Years) ") +
ylab(" Count ") +
labs(title = "Age Distribution")
# Distribution of Age with category of overweight
ggplot(obesity_data, aes(x = Age, fill = NObeyesdad)) +
stat_bin(binwidth=1,alpha=0.75)+
xlab(" Age (Years) ") +
ylab(" Count ") +
labs(title = "Age Distribution Filled by Weight Category")
# Distribution of weight
ggplot(obesity_data, aes(x = Weight, fill = NObeyesdad)) +
geom_histogram(binwidth = 3)+
xlab(" Weight ") +
ylab(" Count ") +
labs(title = "Weight Distribution (Binsize = 3")
#Scatter plot of admissions
scatter_height_weight <- ggplot(obesity_data,
aes(x = height, weight)) +
geom_point(aes(color = gender), size = 3) +
xlab(" Height (meters) ") +
ylab(" Weight kg ") +
ggtitle("Scatter Plot of Height and Weight")
scatter_height_weight
#Scatter plot of admissions
scatter_height_weight <- ggplot(obesity_data,
aes(x = height, weight)) +
geom_point(aes(color = Gender), size = 3) +
xlab(" Height (meters) ") +
ylab(" Weight kg ") +
ggtitle("Scatter Plot of Height and Weight")
scatter_height_weight
#Scatter plot of admissions
scatter_height_weight <- ggplot(obesity_data,
aes(x = Height, Weight)) +
geom_point(aes(color = Gender), size = 3) +
xlab(" Height (meters) ") +
ylab(" Weight kg ") +
ggtitle("Scatter Plot of Height and Weight")
scatter_height_weight
#Scatter plot of admissions
scatter_height_weight <- ggplot(obesity_data,
aes(x = Height, Weight)) +
geom_point(aes(color = Gender), size = 3, alpha = 0.8) +
xlab(" Height (meters) ") +
ylab(" Weight kg ") +
ggtitle("Scatter Plot of Height and Weight")
scatter_height_weight
#Scatter plot of admissions
scatter_height_weight <- ggplot(obesity_data,
aes(x = Height, Weight)) +
geom_point(aes(color = Gender), size = 3, alpha = 0.5) +
xlab(" Height (meters) ") +
ylab(" Weight kg ") +
ggtitle("Scatter Plot of Height and Weight")
scatter_height_weight
#Scatter plot of Height and Weight with Category of Weightness
scatter_height_weight <- ggplot(obesity_data,
aes(x = Height, Weight)) +
geom_point(aes(color = NObeyesdad), size = 3, alpha = 0.5) +
xlab(" Height (meters) ") +
ylab(" Weight kg ") +
ggtitle("Scatter Plot of Height and Weight")
scatter_height_weight
View(new_obesity_data)
catergorical_data_to_numeric <- data.frame(data.matrix(obesity_data[1:16]))
# Need to normalize the data
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
catergorical_data_to_numeric[1:16] <- as.data.frame(
lapply(catergorical_data_to_numeric[1:16],normalize))
new_obesity_data <- cbind(catergorical_data_to_numeric, obesity_data$NObeyesdad)
View(new_obesity_data)
colnames(new_obesity_data)["obesity_data$NObeyesdad"] <- "NObeyesdad"
View(obesity_data[,1:4])
View(obesity_data[, "Gender"])
View(obesity_data["Gender"])
View(obesity_data["Gender", "Height"])
View(obesity_data[c("Gender", "Height"),])
View(obesity_data[c(1, 2),])
View(obesity_data[,c(1, 2)])
View(new_obesity_data)
obesity_gender_cluster <- kmeans(new_obesity_data[, c(1,3:4)], center=2, nstart=20)
obesity_gender_cluster
# Results #
table(obesity_gender_cluster$cluster, new_obesity_data$Gender)
obesity_gender_cluster <- kmeans(new_obesity_data[, c(3:4)], center=2, nstart=20)
obesity_gender_cluster
# Results #
table(obesity_gender_cluster$cluster, obesity_data$Gender)
obesity_gender_cluster <- kmeans(new_obesity_data[, c(1, 3:4)], center=2, nstart=20)
obesity_gender_cluster
# Results #
table(obesity_gender_cluster$cluster, obesity_data$Gender)
library(cluster)
new_obesity_data
clusplot(new_obesity_data, obesity_gender_cluster$cluster, color=T, shade=T, labels=0, lines=0)
clusplot(obesity_data, obesity_gender_cluster$cluster, color=T, shade=T, labels=0, lines=0)
obesity_gender_cluster <- kmeans(new_obesity_data[, c(3:4)], center=2, nstart=20)
obesity_gender_cluster
# Results #
table(obesity_gender_cluster$cluster, obesity_data$Gender)
# Results #
table(obesity_data$Gender, obesity_gender_cluster$cluster)
#Clustering Accuracy
sum(diag(table))/sum(table)
# Results #
table <- table(obesity_data$Gender, obesity_gender_cluster$cluster)
# 1   2
# Female 729 314
# Male   433 635
#Clustering Accuracy
sum(diag(table))/sum(table)
set.seed(123)
obesity_gender_cluster <- kmeans(new_obesity_data[, c(3:4)], center=7, nstart=20)
obesity_gender_cluster
# Results #
table <- table(obesity_data$NObeyesdad, obesity_gender_cluster$cluster)
table
# Results #
table <- table(new_obesity_data$NObeyesdad, obesity_gender_cluster$cluster)
# Results #
table <- table(obesity_data$NObeyesdad, obesity_gender_cluster$cluster)
table
# 1   2
# Female 729 314
# Male   433 635
#Clustering Accuracy
sum(diag(table))/sum(table)
library(cluster)
clusplot(obesity_data, obesity_gender_cluster$cluster, color=T, shade=T, labels=0, lines=0)
obesity_gender_cluster <- kmeans(new_obesity_data[, c(3:4, 17)], center=7, nstart=20)
obesity_gender_cluster
# Results #
table <- table(obesity_data$NObeyesdad, obesity_gender_cluster$cluster)
table
# 1   2
# Female 729 314
# Male   433 635
#Clustering Accuracy
sum(diag(table))/sum(table)
library(cluster)
obesity_gender_cluster <- kmeans(new_obesity_data[,[1:16]], center=7, nstart=20)
obesity_gender_cluster
obesity_gender_cluster <- kmeans(new_obesity_data[,(1:16)], center=7, nstart=20)
obesity_gender_cluster
# Results #
table <- table(obesity_data$NObeyesdad, obesity_gender_cluster$cluster)
table
# 1   2
# Female 729 314
# Male   433 635
#Clustering Accuracy
sum(diag(table))/sum(table)
library(cluster)
clusplot(obesity_data, obesity_gender_cluster$cluster, color=T, shade=T, labels=0, lines=0)
obesity_gender_cluster <- kmeans(new_obesity_data[,(3:4)], center=7, nstart=20)
obesity_gender_cluster
# Results #
table <- table(obesity_data$NObeyesdad, obesity_gender_cluster$cluster)
table
# 1   2
# Female 729 314
# Male   433 635
#Clustering Accuracy
sum(diag(table))/sum(table)
library(cluster)
clusplot(obesity_data, obesity_gender_cluster$cluster, color=T, shade=T, labels=0, lines=0)
# Elbow Plot For Both
tot.withinss <- vector(mode="character", length=100)
for (i in 1:100){
obesity_ <- kmeans(df[,3:4], center=i, nstart=20)
tot.withinss[i] <- obesity_$tot.withinss
}
obesity_ <- kmeans(new_obesity_data[,3:4], center=i, nstart=20)
tot.withinss[i] <- obesity_$tot.withinss
for (i in 1:100){
obesity_ <- kmeans(new_obesity_data[,3:4], center=i, nstart=20)
tot.withinss[i] <- obesity_$tot.withinss
}
plot(1:10, tot.withinss, type="b", pch=19)
plot(1:100, tot.withinss, type="b", pch=19)
for (i in 1:10){
obesity_ <- kmeans(new_obesity_data[,3:4], center=i, nstart=20)
tot.withinss[i] <- obesity_$tot.withinss
}
plot(1:10, tot.withinss, type="b", pch=19)
# Elbow Plot For Both
tot.withinss <- vector(mode="character", length=10)
for (i in 1:10){
obesity_ <- kmeans(new_obesity_data[,3:4], center=i, nstart=20)
tot.withinss[i] <- obesity_$tot.withinss
}
plot(1:10, tot.withinss, type="b", pch=19)
plot(1:10, tot.withinss, type="b", pch=19) + labs(title="Elbow Plot For Kmeans Model")
plot(1:10, tot.withinss, type="b", pch=19) + labs(title="Elbow Plot For Kmeans Model")
# Elbow Plot For Both
tot.withinss <- vector(mode="character", length=10)
for (i in 1:10){
obesity_ <- kmeans(new_obesity_data[,3:4], center=i, nstart=20)
tot.withinss[i] <- obesity_$tot.withinss
}
plot(1:10, tot.withinss, type="b", pch=19) + labs(title="Elbow Plot For Kmeans Model")
plot(1:10, tot.withinss, type="b", pch=19, title = "Elbow Plot For Kmeans Model")
title("Elbow Plot For Kmeans Model")
library(caret)
library(randomForest)
Train <- createDataPartition(obesity_data$NObeyesdad, p = 0.7, list = FALSE)
training <- logistic_data[ Train, ]
testing <- logistic_data[ - Train, ]
set.seed(123)
random_forest <- randomForest(readmitted~.,
data = training,
ntree = 50,
importance =TRUE,
na.action=na.exclude)
pred_w_random <- predict(random_forest, testing, type = "class")
tableCheck <- table(pred_w_random, testing$readmitted)
sum(diag(tableCheck))/sum(tableCheck)
Train <- createDataPartition(obesity_data$NObeyesdad, p = 0.7, list = FALSE)
training <- obesity_data[ Train, ]
testing <- obesity_data[ - Train, ]
set.seed(123)
random_forest <- randomForest(NObeyesdad~.,
data = training,
ntree = 50,
importance =TRUE,
na.action=na.exclude)
pred_w_random <- predict(random_forest, testing, type = "class")
tableCheck <- table(pred_w_random, testing$readmitted)
sum(diag(tableCheck))/sum(tableCheck)
Train <- createDataPartition(new_obesity_data$NObeyesdad, p = 0.7, list = FALSE)
Train <- createDataPartition(new_obesity_data$`obesity_data$NObeyesdad`, p = 0.7, list = FALSE)
training <- obesity_data[ Train, ]
testing <- obesity_data[ - Train, ]
set.seed(123)
random_forest <- randomForest(NObeyesdad~.,
data = training,
ntree = 50,
importance =TRUE,
na.action=na.exclude)
random_forest_data <- data.frame(data.matrix(obesity_data[1:17]))
random_forest_data[1:16] <- as.data.frame(
lapply(random_forest_data[1:16],normalize))
random_forest_data[1:16] <- as.data.frame(
lapply(random_forest_data[1:16],normalize))
Train <- createDataPartition(random_forest_data$NObeyesdad, p = 0.7, list = FALSE)
training <- obesity_data[ Train, ]
testing <- obesity_data[ - Train, ]
set.seed(123)
random_forest <- randomForest(NObeyesdad~.,
data = training,
ntree = 50,
importance =TRUE,
na.action=na.exclude)
random_forest <- randomForest(as.factor(NObeyesdad)~.,
data = training,
ntree = 50,
importance =TRUE,
na.action=na.exclude)
pred_w_random <- predict(random_forest, testing, type = "class")
tableCheck <- table(pred_w_random, testing$readmitted)
tableCheck <- table(pred_w_random, testing$NObeyesdad)
sum(diag(tableCheck))/sum(tableCheck)
transforming_data <- data.frame(data.matrix(obesity_data[1:16]))
transforming_data[1:16] <- as.data.frame(
lapply(transforming_data[1:16],normalize))
random_forest_data <- cbind(catergorical_data_to_numeric, obesity_data$NObeyesdad)
Train <- createDataPartition(random_forest_data$`obesity_data$NObeyesdad`, p = 0.7, list = FALSE)
training <- obesity_data[ Train, ]
testing <- obesity_data[ - Train, ]
set.seed(123)
random_forest <- randomForest(as.factor(`obesity_data$NObeyesdad`)~.,
data = training,
ntree = 50,
importance =TRUE,
na.action=na.exclude)
random_forest <- randomForest(as.factor(obesity_data$NObeyesdad)~.,
data = training,
ntree = 50,
importance =TRUE,
na.action=na.exclude)
View(random_forest_data)
Train <- createDataPartition(obesity_data$NObeyesdad, p = 0.7, list = FALSE)
training <- obesity_data[ Train, ]
testing <- obesity_data[ - Train, ]
set.seed(123)
random_forest <- randomForest(as.factor(NObeyesdad)~.,
data = training,
ntree = 50,
importance =TRUE,
na.action=na.exclude)
pred_w_random <- predict(random_forest, testing, type = "class")
tableCheck <- table(pred_w_random, testing$readmitted)
sum(diag(tableCheck))/sum(tableCheck)
pred_w_random <- predict(random_forest, testing, type = "class")
tableCheck <- table(pred_w_random, testing$NObeyesdad)
sum(diag(tableCheck))/sum(tableCheck)
